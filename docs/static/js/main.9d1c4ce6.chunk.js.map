{"version":3,"sources":["PongEditor.tsx","pong/graphics.ts","pong/state.ts","PongGame.tsx","PongTests.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PongEditor","props","value","options","mode","theme","tabSize","lineNumbers","viewportMargin","Infinity","PongGraphics","areaWidth","areaHeight","ball","ctx","beginPath","arc","position","x","y","radius","Math","PI","fill","paddle","rect","width","height","state","font","fillText","scores","left","toString","right","this","clearRect","drawScores","drawBall","drawPaddle","paddles","PongBall","ballSpeed","ballAngleRadians","velocity","cos","sin","PongPaddle","xPosition","PongState","time","previousTime","PongGame","canvasRef","useRef","useEffect","canvas","current","pixelRatio","window","devicePixelRatio","clientWidth","clientHeight","pongGraphics","getContext","Error","performance","now","draw","console","log","pong","ref","PongTests","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d1c4ce6.chunk.js","sourcesContent":["import React from 'react'\nimport CodeMirror from 'react-codemirror'\n\nconst PongEditor: React.FC<{value: string}> = (props) => {\n  return (\n    <CodeMirror value={props.value} options={{\n      mode: 'javascript',\n      theme: 'cobalt',\n      tabSize: 2,\n      lineNumbers: true,\n      viewportMargin: Infinity,\n    }} />\n  )\n}\n\nexport default PongEditor\n","import PongState, { PongPaddle, PongBall } from './state'\n\nexport default class PongGraphics {\n  constructor(\n    private readonly areaWidth: number,\n    private readonly areaHeight: number,\n  ) {}\n\n  private drawBall(ball: PongBall, ctx: CanvasRenderingContext2D) {\n    ctx.beginPath()\n    ctx.arc(ball.position.x, ball.position.y, ball.radius, 0, 2 * Math.PI, false)\n    ctx.fill()\n  }\n\n  private drawPaddle(paddle: PongPaddle, ctx: CanvasRenderingContext2D) {\n    ctx.rect(\n      paddle.position.x - paddle.width / 2,\n      paddle.position.y - paddle.height / 2,\n      paddle.width,\n      paddle.height\n    )\n    ctx.fill()\n  }\n\n  private drawScores(state: PongState, ctx: CanvasRenderingContext2D) {\n    ctx.font = '48px sans-serif'\n    ctx.fillText(state.scores.left.toString(), 48, 48)\n    ctx.fillText(state.scores.right.toString(), this.areaWidth - 48 * 2, 48)\n  }\n\n  public draw(state: PongState, ctx: CanvasRenderingContext2D) {\n    ctx.clearRect(0, 0, this.areaWidth, this.areaHeight)\n    this.drawScores(state, ctx)\n    this.drawBall(state.ball, ctx)\n    this.drawPaddle(state.paddles.left, ctx)\n    this.drawPaddle(state.paddles.right, ctx)\n  }\n}","interface Vector {\n  x: number;\n  y: number;\n}\n\nexport class PongBall {\n  public readonly radius: number\n  public velocity: Vector\n  public position: Vector\n\n  constructor(areaWidth: number, areaHeight: number, ballSpeed: number, ballAngleRadians: number) {\n    this.radius = 10\n    this.velocity = {\n      x: ballSpeed * Math.cos(ballAngleRadians),\n      y: ballSpeed * Math.sin(ballAngleRadians),\n    }\n    this.position = {\n      x: areaWidth / 2,\n      y: areaHeight / 2,\n    }\n  }\n}\n\nexport class PongPaddle {\n  public velocity: Vector\n  public position: Vector\n  public width: number\n  public height: number\n\n  constructor(areaHeight: number, xPosition: number) {\n    this.velocity = {\n      x: 0,\n      y: 0,\n    }\n    this.position = {\n        x: xPosition,\n        y: areaHeight / 2,\n    }\n    this.width = 10\n    this.height = areaHeight / 5\n  }\n}\n\ninterface LeftRight<T> {\n  left: T\n  right: T\n}\n\nexport default class PongState {\n  public previousTime: number\n  public ball: PongBall\n  public paddles: LeftRight<PongPaddle>\n  public scores: LeftRight<number>\n\n  constructor(areaWidth: number, areaHeight: number, ballSpeed: number, time: number) {\n    this.previousTime = time\n    this.ball = new PongBall(areaWidth, areaHeight, ballSpeed, Math.PI / 8)\n    this.paddles = {\n      left: new PongPaddle(areaHeight, 20),\n      right: new PongPaddle(areaHeight, areaWidth - 20),\n    }\n    this.scores = {\n      left: 0,\n      right: 0,\n    }\n  }\n}","import React, { useRef, useEffect } from 'react'\nimport PongGraphics from './pong/graphics'\nimport PongState from './pong/state'\n\nfunction pong(canvas: HTMLCanvasElement) {\n  const pongGraphics = new PongGraphics(canvas.width, canvas.height)\n  const ctx = canvas.getContext('2d')\n  if (!ctx) { throw new Error('Could not get 2d context'); }\n  const ballSpeed = canvas.width / 5\n  const state = new PongState(canvas.width, canvas.height, ballSpeed, performance.now())\n  pongGraphics.draw(state, ctx)\n  return () => console.log('TODO: cleanup')\n}\n\nconst PongGame: React.FC = () => {\n  const canvasRef = useRef() as React.MutableRefObject<HTMLCanvasElement>\n  useEffect(() => {\n    const canvas = canvasRef.current\n    const pixelRatio = window.devicePixelRatio\n    canvas.width = canvas.clientWidth * pixelRatio\n    canvas.height = canvas.clientHeight * pixelRatio\n    return pong(canvas)\n  }, [canvasRef])\n  return (<canvas ref={canvasRef}></canvas>)\n}\n\nexport default PongGame\n","import React from 'react'\n\nconst PongTests: React.FC = () => {\n  return (\n    <p>TODO: pong tests</p>\n  )\n}\n\nexport default PongTests\n","import React from 'react'\nimport PongEditor from './PongEditor'\nimport PongGame from './PongGame'\nimport PongTests from './PongTests'\n\nimport './App.css'\nimport 'codemirror/lib/codemirror.css'\n\nimport 'codemirror/mode/javascript/javascript'\nimport 'codemirror/theme/cobalt.css'\n\nconst initialCode = `/*\n *  -----------------------------\n * | Welcome to \"Learn to Pong!\" |\n *  -----------------------------\n *\n * Hello! I'm a comment, and I'm going to be your guide\n * for this tutorial.\n *\n * You should see three panels on your screen.\n *\n * The panel I'm in is the code panel. We'll be using this\n * panel to write the code for our Pong game. As you\n * progress, I'll update myself to let you know what to do\n * next.\n *\n * In the top right there's our Pong game - we've already\n * made a bit of a start and handled some of the boring\n * bits, but we still need to write the game code.\n *\n * In the bottom right there are some tests - these will\n * help you know when you've got your functions correct,\n * and give you some hints as to what might be wrong.\n *\n * To get started, let's build some simple pause / unpause\n * functions. The pause function should set \"state.paused\"\n * to true, and the unpause function should set\n * \"state.paused\" to false.\n */\n\nfunction pause (state) {\n  // TODO implement this\n}\n\nfunction unpause (state) {\n  // TODO implement this\n}`;\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"pong-editor\">\n        <PongEditor value={initialCode}/>\n      </div>\n      <div className=\"pong-game\">\n        <PongGame />\n      </div>\n      <div className=\"pong-tests\">\n        <PongTests />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}