{"version":3,"sources":["PongEditor.tsx","pong/graphics.ts","pong/state.ts","PongGame.tsx","PongTests.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PongEditor","props","value","onChange","options","mode","theme","tabSize","lineNumbers","viewportMargin","Infinity","PongGraphics","areaWidth","areaHeight","ball","ctx","beginPath","arc","position","x","y","radius","Math","PI","fill","paddle","rect","width","height","state","font","fillText","scores","left","toString","right","this","clearRect","fillStyle","drawScores","drawBall","drawPaddle","paddles","PongBall","ballSpeed","ballAngleRadians","velocity","cos","sin","PongPaddle","xPosition","PongState","time","previousTime","paddlesSpeed","PongGame","canvasRef","useRef","useEffect","canvas","current","pixelRatio","window","devicePixelRatio","clientWidth","clientHeight","worker","pongGraphics","getContext","Error","performance","now","draw","postMessage","type","parentElement","addEventListener","event","includes","key","data","requestAnimationFrame","console","log","pong","ref","PongTests","className","tests","map","test","id","message","details","initialCode","localStorage","getItem","Worker","App","useState","testState","setTestState","code","ev","setItem","debounce","tabIndex","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3ed3274.chunk.js","sourcesContent":["import React from 'react'\nimport CodeMirror from 'react-codemirror'\n\nconst PongEditor: React.FC<{value: string, onChange: (newValue: string) => any}> = (props) => {\n  return (\n    <CodeMirror value={props.value} onChange={props.onChange} options={{\n      mode: 'javascript',\n      theme: 'cobalt',\n      tabSize: 2,\n      lineNumbers: true,\n      viewportMargin: Infinity,\n    }} />\n  )\n}\n\nexport default PongEditor\n","import PongState, { PongPaddle, PongBall } from './state'\n\nexport default class PongGraphics {\n  constructor(\n    private readonly areaWidth: number,\n    private readonly areaHeight: number,\n  ) {}\n\n  private drawBall(ball: PongBall, ctx: CanvasRenderingContext2D) {\n    ctx.beginPath()\n    ctx.arc(ball.position.x, ball.position.y, ball.radius, 0, 2 * Math.PI, false)\n    ctx.fill()\n  }\n\n  private drawPaddle(paddle: PongPaddle, ctx: CanvasRenderingContext2D) {\n    ctx.rect(\n      paddle.position.x - paddle.width / 2,\n      paddle.position.y - paddle.height / 2,\n      paddle.width,\n      paddle.height\n    )\n    ctx.fill()\n  }\n\n  private drawScores(state: PongState, ctx: CanvasRenderingContext2D) {\n    ctx.font = '48px sans-serif'\n    ctx.fillText(state.scores.left.toString(), 48, 48)\n    ctx.fillText(state.scores.right.toString(), this.areaWidth - 48 * 2, 48)\n  }\n\n  public draw(state: PongState, ctx: CanvasRenderingContext2D) {\n    ctx.clearRect(0, 0, this.areaWidth, this.areaHeight)\n    ctx.fillStyle = 'white'\n    this.drawScores(state, ctx)\n    this.drawBall(state.ball, ctx)\n    this.drawPaddle(state.paddles.left, ctx)\n    this.drawPaddle(state.paddles.right, ctx)\n  }\n}","interface Vector {\n  x: number;\n  y: number;\n}\n\nexport class PongBall {\n  public readonly radius: number\n  public velocity: Vector\n  public position: Vector\n\n  constructor(areaWidth: number, areaHeight: number, ballSpeed: number, ballAngleRadians: number) {\n    this.radius = 10\n    this.velocity = {\n      x: ballSpeed * Math.cos(ballAngleRadians),\n      y: ballSpeed * Math.sin(ballAngleRadians),\n    }\n    this.position = {\n      x: areaWidth / 2,\n      y: areaHeight / 2,\n    }\n  }\n}\n\nexport class PongPaddle {\n  public velocity: Vector\n  public position: Vector\n  public width: number\n  public height: number\n\n  constructor(areaHeight: number, xPosition: number) {\n    this.velocity = {\n      x: 0,\n      y: 0,\n    }\n    this.position = {\n        x: xPosition,\n        y: areaHeight / 2,\n    }\n    this.width = 10\n    this.height = areaHeight / 5\n  }\n}\n\ninterface LeftRight<T> {\n  left: T\n  right: T\n}\n\nexport default class PongState {\n  public previousTime: number\n  public ball: PongBall\n  public paddles: LeftRight<PongPaddle>\n  public scores: LeftRight<number>\n  public areaWidth: number\n  public areaHeight: number\n  public paddlesSpeed: any;\n\n  constructor(areaWidth: number, areaHeight: number, ballSpeed: number, time: number) {\n    this.paddlesSpeed = areaHeight / 50\n    this.areaWidth = areaWidth\n    this.areaHeight = areaHeight\n    this.previousTime = time\n    this.ball = new PongBall(areaWidth, areaHeight, ballSpeed, Math.PI / 2)\n    this.paddles = {\n      left: new PongPaddle(areaHeight, 20),\n      right: new PongPaddle(areaHeight, areaWidth - 20),\n    }\n    this.scores = {\n      left: 0,\n      right: 0,\n    }\n  }\n}","import React, { useRef, useEffect } from 'react'\nimport PongGraphics from './pong/graphics'\nimport PongState from './pong/state'\n\ninterface inputEvent {\n  paddle: 'left' | 'right',\n  action: 'up' | 'down' | 'stop',\n}\n\nfunction pong(canvas: HTMLCanvasElement, worker: Worker) {\n  const pongGraphics = new PongGraphics(canvas.width, canvas.height)\n  const ctx = canvas.getContext('2d')\n  if (!ctx) { throw new Error('Could not get 2d context'); }\n  const ballSpeed = canvas.width / 500\n  const state = new PongState(canvas.width, canvas.height, ballSpeed, performance.now())\n  let inputEvents: inputEvent[] = []\n\n  pongGraphics.draw(state, ctx)\n  worker.postMessage({type: 'tick', state})\n\n  canvas.parentElement!.addEventListener('keyup', event => {\n    if ('qwertasdfg'.includes(event.key)) {\n      state.paddles.left.velocity.y = 0\n    }\n    else if ('yuiophjkl;'.includes(event.key)) {\n      state.paddles.right.velocity.y = 0\n    }\n  })\n  canvas.parentElement!.addEventListener('keydown', event => {\n    if ('qwert'.includes(event.key)) {\n      state.paddles.left.velocity.y = -state.paddlesSpeed\n    }\n    else if ('asdfg'.includes(event.key)) {\n      state.paddles.left.velocity.y = state.paddlesSpeed\n    }\n    else if ('yuiop'.includes(event.key)) {\n      state.paddles.right.velocity.y = -state.paddlesSpeed\n    }\n    else if ('hjkl;'.includes(event.key)) {\n      state.paddles.right.velocity.y = state.paddlesSpeed\n    }\n  })\n\n  worker.addEventListener('message', event => {\n    if (event.data.type !== 'tock') { return }\n    requestAnimationFrame(time => {\n      pongGraphics.draw(event.data.state, ctx)\n      event.data.state.paddles.left.velocity = state.paddles.left.velocity\n      event.data.state.paddles.right.velocity = state.paddles.right.velocity\n      worker.postMessage({type: 'tick', state: event.data.state, time})\n      inputEvents = []\n    })\n  })\n  return () => console.log('TODO: cleanup')\n}\n\nconst PongGame: React.FC<{worker: Worker}> = (props: {worker: Worker}) => {\n  const canvasRef = useRef() as React.MutableRefObject<HTMLCanvasElement>\n  useEffect(() => {\n    const canvas = canvasRef.current\n    const pixelRatio = window.devicePixelRatio\n    canvas.width = canvas.clientWidth * pixelRatio\n    canvas.height = canvas.clientHeight * pixelRatio\n    return pong(canvas, props.worker)\n  }, [canvasRef])\n  return (<canvas ref={canvasRef}></canvas>)\n}\n\nexport default PongGame\n","import React from 'react'\n\nconst PongTests: React.FC<{tests: any[]}> = (props) => {\n  return (\n    <div className=\"testResults\">\n      {props.tests.map(test => \n        <details key={test.id} className={test.state + \" testResult\"}>\n          <summary>{test.message}</summary>\n          <div className=\"detailsBody\">{test.details}</div>\n        </details>\n      )}\n    </div>\n  )\n}\n\nexport default PongTests\n","import React, {useState, useEffect} from 'react'\nimport {debounce} from 'lodash'\nimport PongEditor from './PongEditor'\nimport PongGame from './PongGame'\nimport PongTests from './PongTests'\n\nimport './App.css'\nimport 'codemirror/lib/codemirror.css'\n\nimport 'codemirror/mode/javascript/javascript'\nimport 'codemirror/theme/cobalt.css'\n\nconst defaultCode = `function init(state) {\n\n}\n\nfunction moveBall(ball, dt) {\n\n}\n\nfunction bounceWall(state, dt) {\n\n}\n\nfunction movePaddles(paddles, dt) {\n\n}\n\nfunction clampPaddles(paddles, dt) {\n\n}\n\nfunction bouncePaddles(state, dt) {\n\n}\n\nfunction scoreGoal(state, dt) {\n\n}`;\n\nconst codeFromStorage = localStorage.getItem('pong-code')\nconst initialCode = codeFromStorage || defaultCode\n\nconst worker = new Worker('./sandbox.js')\nconst App: React.FC = () => {\n  const [testState, setTestState] = useState([])\n  useEffect(() => {\n    worker.postMessage({type: 'codeChange', code: initialCode})\n    worker.addEventListener('message', (ev: MessageEvent) => {\n      if (ev.data.type !== 'testResults') { return }\n      setTestState(ev.data.testState)\n      // The first test is \"it should run without error\" - only save the code if it doesn't error\n      if (ev.data.testState[0].state === 'success') {\n        localStorage.setItem('pong-code', ev.data.code)\n      }\n    })\n  }, [])\n  return (\n    <div className=\"App\">\n      <div className=\"pong-editor\">\n        <PongEditor value={initialCode} onChange={debounce(code => worker.postMessage({type: 'codeChange', code: code}), 300)}/>\n      </div>\n      <div className=\"pong-game\" tabIndex={-1}>\n        <PongGame worker={worker}/>\n      </div>\n      <div className=\"pong-tests\">\n        <PongTests tests={testState} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}